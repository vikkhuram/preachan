package twitterclient;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.representation.Form;
import com.sun.jersey.oauth.client.OAuthClientFilter;
import com.sun.jersey.oauth.signature.OAuthParameters;
import com.sun.jersey.oauth.signature.OAuthSecrets;
import java.awt.EventQueue;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.ws.rs.core.MultivaluedMap;
import twitter.twitteroauth.twitterresponse.StatusType;
import twitter.twitteroauth.twitterresponse.Statuses;
import twitter.twitteroauth.twitterresponse.UserType;
import javax.swing.text.Document;

/**
 * @author Kevin Doyle
 * @email  kfrdoyle[at]gmail[dot]com
 */
public class TwitterJFrame extends javax.swing.JFrame {

    static URL oAuthURL = null;//comes from inner class AthoriseConsumer method
    static URL oldURL = null;//prevoius oAuth page on twitter
    static Form requestTokenResponse = null;//Form object from twitter

    public TwitterJFrame() {
        /** TwitterJFrame class constructor */
        initComponents(); //Step (1)

        toggleUIButtons(false);//disable UI Buttons

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                collectLoginData(); //Step (2)
            }
        });

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    loadAWebPage(); //Step (3)
                } catch (IOException ex) {
                    Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }
    /**End of TwitterJFrame class constructor**/

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new TwitterJFrame().setVisible(true);
            }
        });
    }

    private void collectLoginData() {

        client = new TwitterClient();

        try {
            client.login();

        } catch (IOException ex) {
            Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UniformInterfaceException ex) {
            Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAWebPage() throws IOException {

        oldURL = oAuthURL;//keep old url for back button
        URL url = new URL(oAuthURL.toString());
        Document doc = jEPWeb.getDocument();
        try {
            jEPWeb.setPage(url);
        } catch (IOException ioException) {
            System.out.println("Error following link");

            jEPWeb.setDocument(doc);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.WARNING: Do NOT modify this code. The content
     * of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPBaseLayer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jBMentions = new javax.swing.JButton();
        jBMessages = new javax.swing.JButton();
        jBLists = new javax.swing.JButton();
        jBProfile = new javax.swing.JButton();
        jBSearch = new javax.swing.JButton();
        jBTimeLine = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPPhotoHandle = new javax.swing.JPanel();
        jLUserIcon = new javax.swing.JLabel();
        jLTwitterHandle = new javax.swing.JLabel();
        jLStatusLabel = new javax.swing.JLabel();
        jLLatestTweet = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEPWeb = new javax.swing.JEditorPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPGetVerifierNum = new javax.swing.JPanel();
        jTFrequestTokenResponse = new javax.swing.JTextField();
        jBGotRequestToken = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jBHistoryBackButton = new javax.swing.JButton();
        jPTweetStatusUpdate = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("___ Project Preachan___");

        jPBaseLayer.setBackground(new java.awt.Color(51, 51, 255));
        jPBaseLayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPBaseLayer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        System.out.println("In initComponents method");

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel1.setMaximumSize(new java.awt.Dimension(3276, 32767));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jBMentions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_mentions.gif"))); // NOI18N
        jBMentions.setText("Mentions");
        jPanel1.add(jBMentions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 170, -1));

        jBMessages.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_messages.gif"))); // NOI18N
        jBMessages.setText("Messages");
        jPanel1.add(jBMessages, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 170, -1));

        jBLists.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_lists.gif"))); // NOI18N
        jBLists.setText("Lists");
        jPanel1.add(jBLists, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 170, -1));

        jBProfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_profile.gif"))); // NOI18N
        jBProfile.setText("Profile");
        jPanel1.add(jBProfile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 170, -1));

        jBSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_search.gif"))); // NOI18N
        jBSearch.setText("Search");
        jPanel1.add(jBSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 170, -1));

        jBTimeLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_time_line.gif"))); // NOI18N
        jBTimeLine.setText("Home Time Line");
        jBTimeLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTimeLineActionPerformed(evt);
            }
        });
        jPanel1.add(jBTimeLine, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 170, -1));

        jPBaseLayer.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 217, 310));

        jPanel4.setBackground(new java.awt.Color(102, 153, 255));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jPanel4.setEnabled(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/logo.gif"))); // NOI18N
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jLabel1.setText("Kevin Doyle Â© 2011");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 78, -1, -1));

        jPBaseLayer.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 217, 150));

        jPPhotoHandle.setBackground(new java.awt.Color(102, 153, 255));
        jPPhotoHandle.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));

        jLUserIcon.setText("photo");
        jLUserIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        jLUserIcon.setMaximumSize(new java.awt.Dimension(48, 48));
        jLUserIcon.setMinimumSize(new java.awt.Dimension(48, 48));
        jLUserIcon.setPreferredSize(new java.awt.Dimension(48, 48));

        jLTwitterHandle.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLTwitterHandle.setForeground(new java.awt.Color(0, 0, 255));
        jLTwitterHandle.setText("Twitter Handle");

        jLStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLStatusLabel.setForeground(new java.awt.Color(0, 0, 255));
        jLStatusLabel.setText("Status:");

        jLLatestTweet.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLLatestTweet.setForeground(new java.awt.Color(0, 0, 255));
        jLLatestTweet.setText("status");

        javax.swing.GroupLayout jPPhotoHandleLayout = new javax.swing.GroupLayout(jPPhotoHandle);
        jPPhotoHandle.setLayout(jPPhotoHandleLayout);
        jPPhotoHandleLayout.setHorizontalGroup(
            jPPhotoHandleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPhotoHandleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLUserIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPhotoHandleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLTwitterHandle)
                    .addGroup(jPPhotoHandleLayout.createSequentialGroup()
                        .addComponent(jLStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLLatestTweet)))
                .addContainerGap(997, Short.MAX_VALUE))
        );
        jPPhotoHandleLayout.setVerticalGroup(
            jPPhotoHandleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPhotoHandleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPhotoHandleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPPhotoHandleLayout.createSequentialGroup()
                        .addComponent(jLUserIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPPhotoHandleLayout.createSequentialGroup()
                        .addComponent(jLTwitterHandle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(jPPhotoHandleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStatusLabel)
                            .addComponent(jLLatestTweet))
                        .addContainerGap(13, Short.MAX_VALUE))))
        );

        jPBaseLayer.add(jPPhotoHandle, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, -1, -1));

        jScrollPane1.setBorder(null);

        jEPWeb.setBackground(new java.awt.Color(204, 204, 255));
        jEPWeb.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jEPWeb.setContentType("text/html");
        jEPWeb.setEditable(false);
        jEPWeb.setDoubleBuffered(true);
        jEPWeb.setDragEnabled(true);
        jEPWeb.setFocusTraversalPolicyProvider(true);
        jEPWeb.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                jEPWebHyperlinkUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jEPWeb);

        jPBaseLayer.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 100, 940, 470));

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 102));
        jLayeredPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPGetVerifierNum.setBackground(new java.awt.Color(102, 153, 255));

        jTFrequestTokenResponse.setFont(new java.awt.Font("Tahoma", 1, 14));
        jTFrequestTokenResponse.setDragEnabled(true);

        jBGotRequestToken.setText("OK");
        jBGotRequestToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGotRequestTokenActionPerformed(evt);
            }
        });

        jLabel5.setText("Enter 8 digit number, then click [OK]");

        jBHistoryBackButton.setText("<<Back");
        jBHistoryBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHistoryBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPGetVerifierNumLayout = new javax.swing.GroupLayout(jPGetVerifierNum);
        jPGetVerifierNum.setLayout(jPGetVerifierNumLayout);
        jPGetVerifierNumLayout.setHorizontalGroup(
            jPGetVerifierNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPGetVerifierNumLayout.createSequentialGroup()
                .addContainerGap(542, Short.MAX_VALUE)
                .addGroup(jPGetVerifierNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTFrequestTokenResponse)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jBGotRequestToken, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107)
                .addComponent(jBHistoryBackButton)
                .addGap(203, 203, 203))
        );
        jPGetVerifierNumLayout.setVerticalGroup(
            jPGetVerifierNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPGetVerifierNumLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(3, 3, 3)
                .addGroup(jPGetVerifierNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFrequestTokenResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBGotRequestToken, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBHistoryBackButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPGetVerifierNum.setBounds(0, 0, 1170, 80);
        jLayeredPane1.add(jPGetVerifierNum, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPTweetStatusUpdate.setBackground(new java.awt.Color(102, 153, 255));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/twitterclient/icon_tweet.gif"))); // NOI18N
        jButton2.setText("  Tweet!");
        jButton2.setMaximumSize(new java.awt.Dimension(104, 41));
        jButton2.setMinimumSize(new java.awt.Dimension(104, 41));
        jButton2.setPreferredSize(new java.awt.Dimension(101, 41));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 13));
        jTextArea1.setForeground(new java.awt.Color(0, 51, 204));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(3);
        jTextArea1.setToolTipText("120 Maximum characters");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPTweetStatusUpdateLayout = new javax.swing.GroupLayout(jPTweetStatusUpdate);
        jPTweetStatusUpdate.setLayout(jPTweetStatusUpdateLayout);
        jPTweetStatusUpdateLayout.setHorizontalGroup(
            jPTweetStatusUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTweetStatusUpdateLayout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
        );
        jPTweetStatusUpdateLayout.setVerticalGroup(
            jPTweetStatusUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTweetStatusUpdateLayout.createSequentialGroup()
                .addGroup(jPTweetStatusUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPTweetStatusUpdateLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPTweetStatusUpdateLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPTweetStatusUpdate.setBounds(0, 0, 1170, 79);
        jLayeredPane1.add(jPTweetStatusUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPBaseLayer.add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 592, 1170, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPBaseLayer, javax.swing.GroupLayout.DEFAULT_SIZE, 1196, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPBaseLayer, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jEPWebHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jEPWebHyperlinkUpdate
    HyperlinkEvent.EventType type = evt.getEventType();
    final URL url = evt.getURL();

    if (type == HyperlinkEvent.EventType.ACTIVATED) {
        Runnable runner = new Runnable() {

            @Override
            public void run() {
                // Retain reference to original
                Document doc = jEPWeb.getDocument();
                try {
                    jEPWeb.setPage(url);
                } catch (IOException ioException) {
                    JOptionPane.showMessageDialog(null, "Error following link",
                            "Invalid link", JOptionPane.ERROR_MESSAGE);
                    jEPWeb.setDocument(doc);
                }
            }
        };
        EventQueue.invokeLater(runner);
    }
}//GEN-LAST:event_jEPWebHyperlinkUpdate


private void jBHistoryBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHistoryBackButtonActionPerformed

    //History navigation button for travelling back in surfing time
    URL url = null;
    try {
        url = new URL(oldURL.toString());
    } catch (MalformedURLException ex) {
        Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    Document doc = jEPWeb.getDocument();
    try {
        jEPWeb.setPage(url);
    } catch (IOException ioException) {
        System.out.println("Error following link");

        jEPWeb.setDocument(doc);
    }

}//GEN-LAST:event_jBHistoryBackButtonActionPerformed

private void jBTimeLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTimeLineActionPerformed
//User TimeLine Button and functions to get & show the homeTimeLine


}//GEN-LAST:event_jBTimeLineActionPerformed

private void jBGotRequestTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGotRequestTokenActionPerformed
// OK Button on get verifier code jPanel
 try {
            client.oauth_verifier2=jTFrequestTokenResponse.getText();
            client.login_phase_2(requestTokenResponse);
                jTFrequestTokenResponse.setText("");//clear the text field
                        toggleUIButtons(true);//enable UI Buttons
                        jLayeredPane1.moveToFront(jPTweetStatusUpdate);
                        jPGetVerifierNum.setVisible(false);
                        initUserData();//start populating UI with account info

        } catch (IOException ex) {
            Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UniformInterfaceException ex) {
            Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jBGotRequestTokenActionPerformed

     /***
     * @param toggleYN Allows Enable/Disable of UI Components
     * @return void
     */
private void toggleUIButtons(boolean toggleYN){

    boolean toggle=toggleYN;
    jBTimeLine.setEnabled(toggle);
    jBMentions.setEnabled(toggle);
    jBMessages.setEnabled(toggle);
    jBLists.setEnabled(toggle);
    jBProfile.setEnabled(toggle);
    jBSearch.setEnabled(toggle);

}
    private void parseTweet() {
        StringBuilder str = new StringBuilder("<table border='1' width='100%'>");
       // str.append(strGetFriendsTimeline);
        str.append("</table>");

        String tokenisedTextString = "";
        StringTokenizer st = new StringTokenizer(str.toString());

        while (st.hasMoreTokens()) {
            String key = st.nextToken();
            if (key.startsWith("#")) {
                key = "<a href='https://twitter.com/#!/search?q=%23" + key + "'>" + key + "</a>";
            } else if (key.startsWith("@")) {
                key = "<a href='http://twitter.com/" + key + "'>" + key + "</a>";
            } else if (key.startsWith("http")) {
                key = "<a href='" + key + "'>" + key + "</a>";
            } else if (key.startsWith("https")) {
                key = "<a href='" + key + "'>" + key + "</a>";
            }
            tokenisedTextString += key + " ";
            jEPWeb.setText(tokenisedTextString);
        }
    }

    private void initUserData() throws MalformedURLException, IOException {

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                //Bring st back into scope at method level KD 15/07/11
                StatusType st = new StatusType();

                //Log in, get tokens, and append the tokens to the consumer and secret keys
                client.initOAuth();
                //Call getUserTimeline, get a list of statuses, pass the most recent
                //status as a StatusType object, and display the text of that object
                //in the JTextField
                Statuses statuses = client.getUserTimeline(Statuses.class, null, null, null, "1");
                st = statuses.getStatus().get(0);
                //try decoding the text before showing it in the ui 22/07/11 - KD
                jLLatestTweet.setText(st.getText().trim());

                //Get a UserType object from the StatusType object, get the URL of that
                //user's icon, and display that icon in the JLabel
                UserType user = st.getUser();
                String iconSrc = user.getProfileImageUrl();
                URL iconUrl = null;
                try {
                    iconUrl = new URL(iconSrc);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(TwitterJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ImageIcon icon = new ImageIcon(iconUrl, user.getScreenName());
                jLUserIcon.setIcon(icon);
                jLTwitterHandle.setText(user.getScreenName());
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBGotRequestToken;
    private javax.swing.JButton jBHistoryBackButton;
    private javax.swing.JButton jBLists;
    private javax.swing.JButton jBMentions;
    private javax.swing.JButton jBMessages;
    private javax.swing.JButton jBProfile;
    private javax.swing.JButton jBSearch;
    private javax.swing.JButton jBTimeLine;
    private javax.swing.JButton jButton2;
    private javax.swing.JEditorPane jEPWeb;
    private javax.swing.JLabel jLLatestTweet;
    private javax.swing.JLabel jLStatusLabel;
    private javax.swing.JLabel jLTwitterHandle;
    private javax.swing.JLabel jLUserIcon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPBaseLayer;
    private javax.swing.JPanel jPGetVerifierNum;
    private javax.swing.JPanel jPPhotoHandle;
    private javax.swing.JPanel jPTweetStatusUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTFrequestTokenResponse;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    /**
     * private TwitterClient client This points to the class below and gives
     * us access to a static TwitterClient object in memory
     */
    private TwitterClient client;

    static class TwitterClient {

        private WebResource webResource;
        private Client client;
        private static final String BASE_URI = "https://twitter.com";

        public TwitterClient() {

            com.sun.jersey.api.client.config.ClientConfig config = new com.sun.jersey.api.client.config.DefaultClientConfig(); // SSL configuration
            config.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES, new com.sun.jersey.client.urlconnection.HTTPSProperties(getHostnameVerifier(), getSSLContext()));
              client = Client.create(config);
            String resourcePath = "statuses";
            //change this as not all resources are a status
             //webResource = client.resource(BASE_URI).path(resourcePath);
            webResource = client.resource(BASE_URI);
        }
        private static final String OAUTH_BASE_URL = "http://twitter.com/oauth";
        /**
         * Please, specify the consumer_key string obtained from service API pages
         */
        private static final String CONSUMER_KEY = "uDgRAVEtjxsBtR52PqAA";
        /**
         * Please, specify the consumer_secret string obtained from service API pages
         */
        private static final String CONSUMER_SECRET = "85zAfuclWgW7cZTmgqVUq2JEicD6kV6sCOH6SIIZU";
      //  private String oauth_verifier;//retriev from dialog
        private OAuthParameters oauth_params;
        private OAuthSecrets oauth_secrets;
        private OAuthClientFilter oauth_filter;
        private String oauth_access_token;
        private String oauth_access_token_secret;
        String oauth_verifier2=null;//taken from webpage via OK button event


        //public void setResourcePath(String format) {
          //  String resourcePath = java.text.MessageFormat.format("statuses/user_timeline.{0}", new Object[]{format});
            //webResource = client.resource(BASE_URI).path(resourcePath);
        //}

        /**
         * @param responseType Class representing the response
         * @param since query parameter
         * @param since_id query parameter
         * @param page query parameter
         * @param count query parameter
         * @return response object (instance of responseType class)
         */
        //This function returns my tweets
        public <T> T getUserTimeline(Class<T> responseType, String since, String since_id, String page, String count) throws UniformInterfaceException {
            String[] queryParamNames = new String[]{"since", "since_id", "page", "count"};
            String[] queryParamValues = new String[]{since, since_id, page, "count"};
            return webResource.path("/statuses/user_timeline.xml").queryParams(getQueryOrFormParams(queryParamNames, queryParamValues)).accept(javax.ws.rs.core.MediaType.TEXT_XML).get(responseType);
        }
        //this function returns tweets that mention me
         public <T> T getMentions(Class<T> responseType, String since, String since_id, String page, String count) throws UniformInterfaceException {
            String[] queryParamNames = new String[]{"since", "since_id", "page", "count"};
            String[] queryParamValues = new String[]{since, since_id, page, "count"};
            return webResource.path("/statuses/mentions.xml").queryParams(getQueryOrFormParams(queryParamNames, queryParamValues)).accept(javax.ws.rs.core.MediaType.TEXT_XML).get(responseType);
        }

         public <T> T getAllLists(Class<T> responseType, String since, String since_id, String page) throws UniformInterfaceException {
            String[] queryParamNames = new String[]{"since", "since_id", "page"};
            String[] queryParamValues = new String[]{since, since_id, page};
            return webResource.path("/lists/all.xml").queryParams(getQueryOrFormParams(queryParamNames, queryParamValues)).accept(javax.ws.rs.core.MediaType.TEXT_XML).get(responseType);
        }

            //this function returns the tweets of people I follow
            public <T> T getFriendsTimeline(Class<T> responseType, String since, String since_id, String page, String count) throws UniformInterfaceException {
            String[] queryParamNames = new String[]{"since", "since_id", "page", "count"};
            String[] queryParamValues = new String[]{since, since_id, page, count};
            //updated endpoint as per twitter API change 19/07/11 -KD
            return webResource.path("/statuses/home_timeline.xml").queryParams(getQueryOrFormParams(queryParamNames, queryParamValues)).accept(javax.ws.rs.core.MediaType.TEXT_XML).get(responseType);
        }
            //this function allows me to update my status
            public <T> T updateStatus(Class<T> responseType, String status, String in_reply_to_status_id) throws UniformInterfaceException {
            String[] formParamNames = new String[]{"status", "in_reply_to_status_id"};
            String[] formParamValues = new String[]{status, in_reply_to_status_id};
            return webResource.path("/statuses/update.xml").type(javax.ws.rs.core.MediaType.APPLICATION_FORM_URLENCODED).post(responseType, getQueryOrFormParams(formParamNames, formParamValues));
        }
        private MultivaluedMap getQueryOrFormParams(String[] paramNames, String[] paramValues) {
            MultivaluedMap<String, String> qParams = new com.sun.jersey.api.representation.Form();//Debug this String String
            for (int i = 0; i < paramNames.length; i++) {
                if (paramValues[i] != null) {
                    qParams.add(paramNames[i], paramValues[i]);
                }
            }
            return qParams;
        }

        public void close() {
            client.destroy();
        }

        /**
         * You need to call this method at the beginning to authorize the application to work with user data.
         * The method obtains the OAuth access token string, that is appended to each API request later.
         */
        public void login() throws IOException, UniformInterfaceException {

            Form requestTokenResponse = getOAuthRequestToken();
            TwitterJFrame.requestTokenResponse=requestTokenResponse;//pass rTR to outter class so outer class can call loginPhase2
            String temp=getOAuthURL(requestTokenResponse);//playing ball with Jersey just to rob oAuthURL
            }

            //seperate these here
            public void login_phase_2(Form requestTokenResponse) throws IOException, UniformInterfaceException {
            String oauth_verifier = authorizeConsumer(requestTokenResponse);
            Form accessTokenResponse = getOAuthAccessToken(requestTokenResponse, oauth_verifier);
            oauth_access_token_secret = accessTokenResponse.getFirst("oauth_token_secret");
            oauth_access_token = accessTokenResponse.getFirst("oauth_token");
            }

        private Form getOAuthRequestToken() throws UniformInterfaceException {
            WebResource resource = client.resource(OAUTH_BASE_URL).path("request_token");
            oauth_params = new OAuthParameters().consumerKey(CONSUMER_KEY).signatureMethod(com.sun.jersey.oauth.signature.HMAC_SHA1.NAME).version("1.0").nonce().timestamp();
            oauth_secrets = new OAuthSecrets().consumerSecret(CONSUMER_SECRET);
            oauth_filter = new OAuthClientFilter(client.getProviders(), oauth_params, oauth_secrets);
            resource.addFilter(oauth_filter);
            return resource.get(Form.class);
        }

        private Form getOAuthAccessToken(Form requestTokenResponse, String oauth_verifier) throws UniformInterfaceException {
            WebResource resource = client.resource(OAUTH_BASE_URL).path("access_token");
            oauth_params.token(requestTokenResponse.getFirst("oauth_token")).signatureMethod(com.sun.jersey.oauth.signature.HMAC_SHA1.NAME).version("1.0").nonce().timestamp().verifier(oauth_verifier);
            oauth_secrets.tokenSecret(requestTokenResponse.getFirst("oauth_token_secret"));
            resource.addFilter(oauth_filter);
            return resource.get(Form.class);
        }

        /**
         * The method sets the OAuth parameters for webResource.
         * The method needs to be called after login() method, or when the webResource path is changed
         */
        public void initOAuth() {
            oauth_params = new OAuthParameters().consumerKey(CONSUMER_KEY).token(oauth_access_token).signatureMethod(com.sun.jersey.oauth.signature.HMAC_SHA1.NAME).version("1.0").nonce().timestamp();
            oauth_secrets = new OAuthSecrets().consumerSecret(CONSUMER_SECRET).tokenSecret(oauth_access_token_secret);
            oauth_filter = new OAuthClientFilter(client.getProviders(), oauth_params, oauth_secrets);
            webResource.addFilter(oauth_filter);
        }

        /**
         * The method increases OAuth nonce and timestamp parameters to make each request unique.
         * The method should be called when repetitive requests are sent to service API provider:
         * <pre>
         * client.initOauth();
         * client.getXXX(...);
         * client.makeOAuthRequestUnique();
         * client.getYYY(...);
         * client.makeOAuthRequestUnique();
         * client.getZZZ(...);
         * </pre>
         */
        public void makeOAuthRequestUnique() {
            if (oauth_params != null) {

                oauth_params.nonce().timestamp();
            }
        }

       private String getOAuthURL(Form requestTokenResponse)throws IOException{
           URL url =null;
           String strURLstr="";

            try {
              URI uri = new URI("http://twitter.com/oauth/authorize?oauth_token=" + requestTokenResponse.getFirst("oauth_token"));
                 url = uri.toURL();
                strURLstr=url.toString();
            } catch (java.net.URISyntaxException ex) {
            }
            TwitterJFrame.oAuthURL=url;//transfer oAuthURL from inner class to outter class
            return strURLstr;
       }

        private java.lang.String authorizeConsumer(Form requestTokenResponse) throws IOException {
            String ov2=null;
            ov2=oauth_verifier2;
            return ov2;
    }

        private HostnameVerifier getHostnameVerifier() {
           return new HostnameVerifier() {

                @Override
                public boolean verify(String hostname, javax.net.ssl.SSLSession sslSession) {
                    return true;
                }
            };
        }

        private SSLContext getSSLContext() {
          javax.net.ssl.TrustManager x509 = new javax.net.ssl.X509TrustManager() {

                @Override
                public void checkClientTrusted(java.security.cert.X509Certificate[] arg0, String arg1) throws java.security.cert.CertificateException {
                    return;
                }

                @Override
                public void checkServerTrusted(java.security.cert.X509Certificate[] arg0, String arg1) throws java.security.cert.CertificateException {
                    return;
                }

                @Override
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
            };
            SSLContext ctx = null;
            try {
                ctx = SSLContext.getInstance("SSL");
                ctx.init(null, new javax.net.ssl.TrustManager[]{x509}, null);
            } catch (java.security.GeneralSecurityException ex) {
            }
            return ctx;
        }
    }
}